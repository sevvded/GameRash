// <auto-generated />
using System;
using GameRash.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GameRash.Migrations
{
    [DbContext(typeof(GameRashDbContext))]
    partial class GameRashDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GameRash.Models.Admin", b =>
                {
                    b.Property<int>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminID"));

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("AdminID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            AdminID = 1,
                            UserID = 1
                        });
                });

            modelBuilder.Entity("GameRash.Models.Developer", b =>
                {
                    b.Property<int>("DeveloperID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeveloperID"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudioName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("DeveloperID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Developers");

                    b.HasData(
                        new
                        {
                            DeveloperID = 1,
                            Bio = "We create amazing indie games!",
                            StudioName = "Awesome Games Studio",
                            UserID = 2
                        });
                });

            modelBuilder.Entity("GameRash.Models.Game", b =>
                {
                    b.Property<int>("GameID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GameID"));

                    b.Property<string>("CoverImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeveloperID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GameID");

                    b.HasIndex("DeveloperID");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            GameID = 1,
                            CoverImage = "epic_adventure_cover.jpg",
                            Description = "An amazing RPG adventure game",
                            DeveloperID = 1,
                            Title = "Epic Adventure"
                        },
                        new
                        {
                            GameID = 2,
                            CoverImage = "space_explorer_cover.jpg",
                            Description = "Explore the vast universe",
                            DeveloperID = 1,
                            Title = "Space Explorer"
                        });
                });

            modelBuilder.Entity("GameRash.Models.GameReview", b =>
                {
                    b.Property<int>("ReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewID"));

                    b.Property<int>("GameID")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ReviewID");

                    b.HasIndex("GameID");

                    b.HasIndex("UserID", "GameID")
                        .IsUnique();

                    b.ToTable("GameReviews");
                });

            modelBuilder.Entity("GameRash.Models.Library", b =>
                {
                    b.Property<int>("LibraryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LibraryID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("LibraryID");

                    b.HasIndex("GameID");

                    b.HasIndex("UserID", "GameID")
                        .IsUnique();

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("GameRash.Models.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PurchaseID")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseID1")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentID");

                    b.HasIndex("PurchaseID");

                    b.HasIndex("PurchaseID1")
                        .IsUnique()
                        .HasFilter("[PurchaseID1] IS NOT NULL");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("GameRash.Models.Purchase", b =>
                {
                    b.Property<int>("PurchaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseID"));

                    b.Property<int>("GameID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PurchaseID");

                    b.HasIndex("GameID");

                    b.HasIndex("UserID");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("GameRash.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            Email = "admin@gamingplatform.com",
                            Password = "hashedpassword123",
                            Username = "admin_user"
                        },
                        new
                        {
                            UserID = 2,
                            Email = "dev@studio.com",
                            Password = "hashedpassword456",
                            Username = "dev_studio"
                        },
                        new
                        {
                            UserID = 3,
                            Email = "gamer@email.com",
                            Password = "hashedpassword789",
                            Username = "gamer_one"
                        });
                });

            modelBuilder.Entity("GameRash.Models.Wishlist", b =>
                {
                    b.Property<int>("WishlistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WishlistID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GameID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("WishlistID");

                    b.HasIndex("GameID");

                    b.HasIndex("UserID", "GameID")
                        .IsUnique();

                    b.ToTable("Wishlists");
                });

            modelBuilder.Entity("GameRash.Models.Admin", b =>
                {
                    b.HasOne("GameRash.Models.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("GameRash.Models.Admin", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameRash.Models.Developer", b =>
                {
                    b.HasOne("GameRash.Models.User", "User")
                        .WithOne("Developer")
                        .HasForeignKey("GameRash.Models.Developer", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameRash.Models.Game", b =>
                {
                    b.HasOne("GameRash.Models.Developer", "Developer")
                        .WithMany("Games")
                        .HasForeignKey("DeveloperID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Developer");
                });

            modelBuilder.Entity("GameRash.Models.GameReview", b =>
                {
                    b.HasOne("GameRash.Models.Game", "Game")
                        .WithMany("GameReviews")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameRash.Models.User", "User")
                        .WithMany("GameReviews")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameRash.Models.Library", b =>
                {
                    b.HasOne("GameRash.Models.Game", "Game")
                        .WithMany("Libraries")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameRash.Models.User", "User")
                        .WithMany("Libraries")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameRash.Models.Payment", b =>
                {
                    b.HasOne("GameRash.Models.Purchase", "Purchase")
                        .WithMany("Payments")
                        .HasForeignKey("PurchaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GameRash.Models.Purchase", null)
                        .WithOne("Payment")
                        .HasForeignKey("GameRash.Models.Payment", "PurchaseID1");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("GameRash.Models.Purchase", b =>
                {
                    b.HasOne("GameRash.Models.Game", "Game")
                        .WithMany("Purchases")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameRash.Models.User", "User")
                        .WithMany("Purchases")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameRash.Models.Wishlist", b =>
                {
                    b.HasOne("GameRash.Models.Game", "Game")
                        .WithMany("Wishlists")
                        .HasForeignKey("GameID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GameRash.Models.User", "User")
                        .WithMany("Wishlists")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GameRash.Models.Developer", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("GameRash.Models.Game", b =>
                {
                    b.Navigation("GameReviews");

                    b.Navigation("Libraries");

                    b.Navigation("Purchases");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("GameRash.Models.Purchase", b =>
                {
                    b.Navigation("Payment")
                        .IsRequired();

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("GameRash.Models.User", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("Developer")
                        .IsRequired();

                    b.Navigation("GameReviews");

                    b.Navigation("Libraries");

                    b.Navigation("Purchases");

                    b.Navigation("Wishlists");
                });
#pragma warning restore 612, 618
        }
    }
}
